       title: "OpenC2 Actuator Profile for Security Posture Attribute Collection"
     package: "http://oasis-open.org/openc2/oc2pac/v1.1"
  namespaces: {"ls": "http://oasis-open.org/openc2/oc2ls-types/v1.1"}
     exports: ["AP-Target", "AP-Args", "AP-Specifiers", "AP-Results"]

Action = Enumerated
   3 query

Target = Enumerated
   9 features
1035 pac/

Args = Enumerated
   1 start_time
   2 stop_time
   3 duration
   4 response_requested
1035 pac/

Actuator = Enumerated
1035 pac/

Results = Enumerated
   1 versions
   2 profiles
   3 pairs
   4 rate_limit
1035 pac/

Pairs = Enumerated       // Enumerated item values are string literals, not data structures
   3 query: [pac/attrs, pac/sbom]

AP-Target = Choice
   1 attrs Attribute-Specifiers
   2 sbom SBOM-Specifiers

AP-Args = Map{1..*}                               // Profile-defined command arguments
   1 foo              String optional             // Delete from Args if none

AP-Specifiers = Map                               // Profile-defined actuator specifiers
   1 foo              String optional             // Delete from Actuator if none

AP-Results = Map{1..*}                            // Profile-defined response results
   1 attrs       PostureAttributes optional
   2 sbom             SBOM optional

Attribute-Specifiers = Map{1..*}
   1 osVersion Boolean optional
   2 passwordMin Boolean optional
   3 file FileSpecifiers optional

PostureAttributes = Map{1..*}
   1 osVersion OS-Version optional
   2 passwordMin Integer optional
   3 file File optional

OS-Version = Record
   1 name             String                      // Distribution or product name
   2 version          String                      // Suitable for presentation OS version
   3 major            Integer optional            // Major release version
   4 minor            Integer optional
   5 patch            Integer optional            // Patch release
   6 build            String optional             // Build-specific or variant string
   7 platform         String optional             // OS Platform or ID
   8 platform_like    String [0..*]               // Closely-related platforms
   9 codename         String optional             // OS Release codename
  10 arch             OS-Arch optional            // OS Architecture
  11 install_date     DateTime optional           // Install date of the OS

OS-Arch = Enumerated                              // Win: wmic os get osarchitecture, or Unix: uname -m
   1 32-bit
   2 64-bit
   3 x86_32
   4 x86_64

FileSpecifiers = Map
   1 path String

File = Record
   1 data Binary

SBOM-Specifiers = Map
   1 type Enumerated(Enum[SBOM])
   2 format ArrayOf(Enum[SBOM-Format])

SBOM = Choice
   1 uri              ls:URI                      // Unique identifier or locator of the SBOM
   2 summary          SBOM-Elements               // NTIA Minimumum Elements of an SBOM
   3 content          SBOM-Format                // SBOM structured data
   4 blob             SBOM-Blob                   // Uninterpreted SBOM bytes

SBOM-Elements = Record
   1 supplier         String [1..*]               // Name of entity that creates, defines, and identifies components
   2 component        String [1..*]               // Designation(s) assigned to a unit of software defined by the original supplier
   3 version          String                      // Identifier used by supplier to specify a change from a previously identified version
   4 component_ids    String [0..*]               // Other identifiers used to identify a component, or serve as a look-yp key
   5 dependencies     String [0..*]               // Upstream component(s)
   6 author           String                      // Name of the entity that creates SBOM data for this component
   7 timestamp        DateTime                    // Record of the date and time of the SBOM data assembly

SBOM-Format = Choice
   1 cyclonedx        String                      // Placeholder for CycloneDX data model
   2 spdx2            String                      // Placeholder for SPDX v2.x data model
   3 spdx3            String                      // Placeholder for SPDX v3 data model

SBOM-Blob = Record
   1 format           Enumerated(Enum[SBOM-Format])
   2 data             Binary

DateTime = String{pattern="^((?:(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2}(?:\.\d+)?))(Z|[\+-]\d{2}:\d{2})?)$"} // RFC-3339 format